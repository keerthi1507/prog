program -1

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import fetch_california_housing


df = fetch_california_housing(as_frame=True).frame
numerical_features = df.select_dtypes(include=[np.number]).columns

fig, axes = plt.subplots(3, 3, figsize=(15, 12))
for ax, feature in zip(axes.flat, numerical_features):
    sns.histplot(df[feature], kde=True, bins=30, ax=ax)
   



program 2


import pandas as pd, numpy as np, seaborn as sns, matplotlib.pyplot as plt
from sklearn.datasets import fetch_california_housing

df = fetch_california_housing(as_frame=True).frame

plt.figure(figsize=(10, 8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
sns.pairplot(df.iloc[:, :5], plot_kws={'alpha': 0.7})





program 3


import numpy as np, pandas as pd, matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.datasets import load_iris
from sklearn.preprocessing import StandardScaler

# Load and standardize data
X, y = load_iris(return_X_y=True)
X_scaled = StandardScaler().fit_transform(X)

# PCA to 2D
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)

# Plot
plt.scatter(X_pca[:, 0], X_pca[:, 1], c=y, cmap='viridis', edgecolor='k', s=50)
plt.xlabel('PC 1'), plt.ylabel('PC 2')
plt.title('PCA - Iris (2D)'), plt.colorbar(label='Species')
plt.show()



program 4




program 5 


import numpy as np, matplotlib.pyplot as plt
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score


X = np.random.rand(100, 1)

y = np.random.rand(100, 1)
X_train,y_train,X_test=X[:50],X[:50],y[:50]

# Plot training/test points
plt.figure(figsize=(10, 6))
plt.scatter(X_train, y_train, c='blue', label='Train')
plt.scatter(X_test, y[50:], c='red', label='Test')
plt.legend(), plt.show()
plt.title('KNN Classification'), plt.xlabel('X'), plt.ylabel('Class')
plt.legend(), plt.show()


program 8 



import numpy as np, pandas as pd, matplotlib.pyplot as plt
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import accuracy_score, classification_report


data = load_breast_cancer()
X, y = data.data, data.target
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

clf = DecisionTreeClassifier(random_state=42).fit(X_train, y_train)



plt.figure(figsize=(12, 6))
plot_tree(clf, filled=True, feature_names=data.feature_names, class_names=data.target_names)
plt.title("Decision Tree")
plt.show()


program 9






program 10
import numpy as np, pandas as pd, matplotlib.pyplot as plt
from sklearn.datasets import load_breast_cancer
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA





X, y = load_breast_cancer(return_X_y=True)
X_scaled = StandardScaler().fit_transform(X)

kmeans = KMeans(n_clusters=2, random_state=42).fit(X_scaled)
clusters = kmeans.predict(X_scaled)
X_pca = PCA(n_components=2).fit_transform(X_scaled)
centroids = PCA(n_components=2).fit(X_scaled).transform(kmeans.cluster_centers_)


plt.scatter(*X_pca[clusters==0].T, c='red', label='Cluster 0')
plt.scatter(*X_pca[clusters==1].T, c='blue', label='Cluster 1')
plt.scatter(*centroids.T, c='black', s=200, marker='X', label='Centroids')
plt.title('K-Means on Breast Cancer Data'), plt.legend()
plt.xlabel('PC1'), plt.ylabel('PC2'), plt.show()

